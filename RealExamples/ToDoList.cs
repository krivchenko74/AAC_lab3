using System;
using Lab3.LinkedListTask;

namespace Lab3.RealExamples
{
    public static class ToDoList
    {
        public static void Run()
        {
            var taskList = new CustomLinkedList<string>();
            var running = true;

            Console.Clear();
            Console.WriteLine("üìù === –°–ø–∏—Å–æ–∫ –¥–µ–ª ===\n");

            while (running)
            {
                Console.WriteLine("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                Console.WriteLine("1 ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
                Console.WriteLine("2 ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
                Console.WriteLine("3 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
                Console.WriteLine("4 ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫");
                Console.WriteLine("0 ‚Äî –í—ã–π—Ç–∏\n");

                Console.Write("–í–∞—à –≤—ã–±–æ—Ä: ");
                var choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ");
                        string? newTask = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(newTask))
                        {
                            taskList.AddLast(newTask);
                            Console.WriteLine("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
                        }
                        else
                        {
                            Console.WriteLine("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞—á–µ–π.");
                        }
                        break;

                    case "2":
                        if (taskList.IsEmpty())
                        {
                            Console.WriteLine("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!");
                            break;
                        }
                        Console.Write("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        string? delTask = Console.ReadLine();
                        if (taskList.Remove(delTask!))
                            Console.WriteLine("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.");
                        else
                            Console.WriteLine("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                        break;

                    case "3":
                        Console.WriteLine("üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:");
                        PrintTasks(taskList);
                        break;

                    case "4":
                        taskList.Clear();
                        Console.WriteLine("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.");
                        break;

                    case "0":
                        running = false;
                        Console.WriteLine("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                        break;

                    default:
                        Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        break;
                }

                Console.WriteLine();
            }
        }

        private static void PrintTasks(CustomLinkedList<string> list)
        {
            if (list.IsEmpty())
            {
                Console.WriteLine("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.");
                return;
            }

            var i = 1;
            var current = list.Head;
            while (current != null)
            {
                Console.WriteLine($"{i}. {current.Data}");
                current = current.Next;
                i++;
            }
        }
    }
}
