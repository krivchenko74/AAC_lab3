using System;
using System.Threading;
using Lab3.QueueTask;

namespace Lab3.RealExamples
{
    public static class TechnicalSupport
    {
        private static LinkedQueue<string> supportQueue = new();

        public static void Run()
        {
            Console.WriteLine("=== –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===");
            Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–∏–ª–∏ 'start' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):");

            var ticketNumber = 1;
            
            while (true)
            {
                Console.Write($"–ó–∞—è–≤–∫–∞ {ticketNumber}: ");
                var input = Console.ReadLine();

                if (string.IsNullOrWhiteSpace(input))
                    continue;

                if (input.Equals("exit", StringComparison.OrdinalIgnoreCase))
                    return;

                if (input.Equals("start", StringComparison.OrdinalIgnoreCase))
                    break;

                var ticket = $"#{ticketNumber} ({DateTime.Now:T}) ‚Äî {input}";
                supportQueue.Enqueue(ticket);
                ticketNumber++;
                Console.WriteLine("‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n");
            }

            Console.WriteLine("\n–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–æ–∫...\n");
            
            var processed = 0;
            var rand = new Random();

            while (!supportQueue.IsEmpty())
            {
                var issue = supportQueue.Dequeue();
                Console.WriteLine($"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {issue}");
                Thread.Sleep(rand.Next(1000, 2500)); // –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                Console.WriteLine($"‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {issue}\n");
                processed++;
            }

            Console.WriteLine($"–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –í—Å–µ–≥–æ: {processed}");
        }
    }
}